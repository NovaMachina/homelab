---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: home-assistant
spec:
  instances: 3
  imageName: ghcr.io/cloudnative-pg/postgresql:16.2-16
  primaryUpdateStrategy: unsupervised
  storage:
    size: 10Gi
  superuserSecret:
    name: cloudnative-pg-secret
  enableSuperuserAccess: true
  postgresql:
    parameters:
      max_connections: "400"
      shared_buffers: 256MB
  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: true
  resources:
    requests:
      cpu: 500m
    limits:
      memory: 4Gi
  monitoring:
    enablePodMonitor: true
    # Ref: https://github.com/cloudnative-pg/cloudnative-pg/issues/2501
    podMonitorMetricRelabelings:
      - { sourceLabels: ["cluster"], targetLabel: cnpg_cluster, action: replace }
      - { regex: cluster, action: labeldrop }
  # backup:
  #   retentionPolicy: 30d
  #   barmanObjectStore: &barmanObjectStore
  #     data:
  #       compression: bzip2
  #     wal:
  #       compression: bzip2
  #       maxParallel: 8
  #     destinationPath: s3://cloudnative-pg/
  #     endpointURL: https://s3.turbo.ac
  #     # Note: serverName version needs to be inclemented
  #     # when recovering from an existing cnpg cluster
  #     serverName: &currentCluster postgres16-v6
  #     s3Credentials:
  #       accessKeyId:
  #         name: cloudnative-pg-secret
  #         key: aws-access-key-id
  #       secretAccessKey:
  #         name: cloudnative-pg-secret
  #         key: aws-secret-access-key
  # Note: previousCluster needs to be set to the name of the previous
  # cluster when recovering from an existing cnpg cluster
  # bootstrap:
  #   recovery:
  #     source: &previousCluster postgres16-v5
  # # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name: *previousCluster
  #     barmanObjectStore:
  #       <<: *barmanObjectStore
  #       serverName: *previousCluster
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: home-assistant-pg-secret # Customisable
  namespace: external-secrets # Same of the SecretStores
spec:
  updatePolicy: Replace
  deletionPolicy: Delete # the provider' secret will be deleted if the PushSecret is deleted
  refreshInterval: 10s # Refresh interval for which push secret will reconcile
  secretStoreRefs: # A list of secret stores to push secrets to
    - name: onepassword-connect
      kind: ClusterSecretStore
  selector:
    secret:
      name: home-assistant-app # Source Kubernetes secret to be pushed
  data:
    - match:
        remoteRef:
          remoteKey: home-assistant-pg # Remote reference (where the secret is going to be pushed)