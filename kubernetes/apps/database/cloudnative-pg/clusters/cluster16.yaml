---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: postgres16
spec:
  instances: 3
  imageName: ghcr.io/cloudnative-pg/postgresql:16.2-16
  primaryUpdateStrategy: unsupervised
  storage:
    size: 20Gi
  superuserSecret:
    name: cloudnative-pg-secret
  enableSuperuserAccess: true
  postgresql:
    parameters:
      max_connections: "400"
      shared_buffers: 256MB
  nodeMaintenanceWindow:
    inProgress: false
    reusePVC: true
  resources:
    requests:
      cpu: 500m
      memory: 1Gi
    limits:
      memory: 4Gi
  monitoring:
    enablePodMonitor: true
    # Ref: https://github.com/cloudnative-pg/cloudnative-pg/issues/2501
    podMonitorMetricRelabelings:
      - { sourceLabels: ["cluster"], targetLabel: cnpg_cluster, action: replace }
      - { regex: cluster, action: labeldrop }
  backup:
    retentionPolicy: 30d
    barmanObjectStore: &barmanObjectStore
      data:
        compression: bzip2
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://cloudnative-pg/
      endpointURL: http://10.0.0.14:10106/
      # Note: serverName version needs to be inclemented
      # when recovering from an existing cnpg cluster
      serverName: &currentCluster postgres16-v1
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg-secret
          key: AWS_ACCESS_KEY_ID
        secretAccessKey:
          name: cloudnative-pg-secret
          key: AWS_SECRET_ACCESS_KEY
  # Note: previousCluster needs to be set to the name of the previous
  # cluster when recovering from an existing cnpg cluster
  # bootstrap:
  #   recovery:
  #     source: &previousCluster postgres16-v0
  # # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name: *previousCluster
  #     barmanObjectStore:
  #       <<: *barmanObjectStore
  #       serverName: *previousCluster
---
apiVersion: external-secrets.io/v1alpha1
kind: PushSecret
metadata:
  name: postgres16-secret
  namespace: external-secrets
spec:
  refreshInterval: 1h
  secretStoreRefs:
    - name: onepassword-connect
      kind: ClusterSecretStore
  selector:
    secret:
      name: home-assistant-app # Source Kubernetes secret to be pushed
  data:
    - match:
        secretKey: &key dbname
        remoteRef:
          remoteKey: postgres16
          property: *key
    - match:
        secretKey: &key host
        remoteRef:
          remoteKey: postgres16
          property: *key
    - match:
        secretKey: &key jdbc-uri
        remoteRef:
          remoteKey: postgres16
          property: *key
    - match:
        secretKey: &key password
        remoteRef:
          remoteKey: postgres16
          property: *key
    - match:
        secretKey: &key pgpass
        remoteRef:
          remoteKey: postgres16
          property: *key
    - match:
        secretKey: &key port
        remoteRef:
          remoteKey: postgres16
          property: *key
    - match:
        secretKey: &key uri
        remoteRef:
          remoteKey: postgres16
          property: *key
    - match:
        secretKey: &key user
        remoteRef:
          remoteKey: postgres16
          property: *key
    - match:
        secretKey: &key username
        remoteRef:
          remoteKey: postgres16
          property: *key